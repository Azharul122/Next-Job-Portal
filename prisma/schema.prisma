// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextIndex","fullTextSearch"]
}

datasource db {
  provider     = "mongodb"
  url          = env("MONGO_URI")
  relationMode = "prisma"
}

model Job {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  title             String
  Description       String?
  sort_description  String?
  img               String?
  isPublished       Boolean      @default(false)
  tags              String[]
  savedUser         String[]
  shiftTimimg       String?
  hourlyRate        String?
  yearsOfExperience String?
  workMode          String?
  deadline          String?
  attachments       Attachment[]
  categoryId        String?      @db.ObjectId
  category          Category?    @relation(fields: [categoryId], references: [id])
  companyId         String?      @db.ObjectId
  company           Company?     @relation(fields: [companyId], references: [id])
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @default(now())

  @@index([categoryId])
  @@index([companyId])
  @@fulltext([title])
}

model Attachment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  name      String
  jobId     String?  @db.ObjectId
  job       Job?     @relation(fields: [jobId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Category {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  categoryTitle String   @unique
  jobs          Job[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

model Company {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String
  companyTitle  String   @unique
  jobs          Job[]
  description   String?
  logo          String?
  coverImage    String?
  mail          String?
  socialLink    String?
  website       String?
  address_line1 String?
  address_line2 String?
  city          String?
  zip_code      String?
  followers     String[]
  overView      String?
  whyJoinUs     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

model UserProfile {
  userId         String        @id @map("_id")
  fullName       String?
  email          String?
  contact        String?
  appliedJobs    AppliedJobs[]
  Resumes        Resumes[]
  ActiveResumeId String?
}

type AppliedJobs {
  jobId     String
  appliedAt DateTime @default(now())
}

model Resumes {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String?
  url        String
  profileId  String
  uerProfile UserProfile @relation(fields: [profileId], references: [userId], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  @@index([profileId], name: "idx_profileId")
}
